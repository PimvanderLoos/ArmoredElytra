name: Publish release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Release Version. e.g., 1.10.1
        required: true
        type: string
      nextDevVersion:
        description: Next Dev Version. e.g., 1.10.2-SNAPSHOT
        required: true
        type: string
      releaseNotes:
        description: Release notes (supports markdown)
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-release-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TIMEOUT_SECONDS: 3600
      MAVEN_GPG_FINGERPRINT: 6C063BAA00065DFED08D7CD6B21CB73DBBF60FE5
      MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      RELEASE_VERSION: ${{ inputs.releaseVersion }}
      NEXT_DEV_VERSION: ${{ inputs.nextDevVersion }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Configure Git identity + sign commits & tags
        run: |
          git config --global user.name  "PimvanderLoos"
          git config --global user.email "3114723+PimvanderLoos@users.noreply.github.com"
          git config --global user.signingkey ${MAVEN_GPG_FINGERPRINT}
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "default-cache-ttl-ssh ${TIMEOUT_SECONDS}" >> ~/.gnupg/gpg-agent.conf
          echo "max-cache-ttl-ssh ${TIMEOUT_SECONDS}" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye

      - name: Set up JDK 21 + GPG
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          distribution: temurin
          java-version: 21
          cache: maven
          gpg-private-key: ${{ secrets.MAVEN_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Prepare release (commits + tag)
        run: |
          mvn --batch-mode --show-version --no-transfer-progress \
            -DreleaseVersion='${RELEASE_VERSION}' \
            -DdevelopmentVersion='${NEXT_DEV_VERSION}' \
            -DsignTag=true \
            -Darguments="-Psign -Dgpg.keyname=${MAVEN_GPG_FINGERPRINT}" \
            release:prepare

      - name: Upload build artifacts (JARs + .asc)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ArmoredElytra-${{ github.sha }}
          if-no-files-found: error
          path: |
            target/ArmoredElytra-${RELEASE_VERSION}.jar*

      - name: Deploy Javadoc to GitHub Pages (optional)
        uses: JamesIves/github-pages-deploy-action@6c2d9db40f9296374acc17b90404b6e8864128c8 # v4.7.3
        with:
          branch: gh-pages
          folder: target/reports/apidocs
          target-folder: /

      - name: Perform release (builds tag, signs, deploys to Central)
        run: |
          mvn --batch-mode --show-version --no-transfer-progress \
            -Darguments="-Psign -Dgpg.keyname=${MAVEN_GPG_FINGERPRINT}" \
            release:perform

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          tag_name: v${RELEASE_VERSION}
          target_commitish: ${{ github.sha }}
          body: ${{ inputs.releaseNotes }}
          files: |
            target/ArmoredElytra-${RELEASE_VERSION}.jar*
